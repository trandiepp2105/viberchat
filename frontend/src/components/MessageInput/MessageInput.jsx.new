import React, { useState, useRef, useEffect } from "react";
import "./MessageInput.scss";

const MessageInput = ({ onSendMessage, onTyping, disabled = false }) => {
  const [message, setMessage] = useState("");
  const [attachments, setAttachments] = useState([]);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const fileInputRef = useRef(null);
  const typingTimeoutRef = useRef(null);

  // Handle typing indicator
  useEffect(() => {
    if (message.length > 0) {
      onTyping && onTyping(true);
      
      // Clear the previous timeout
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
      
      // Set a new timeout to stop the typing indicator after 3 seconds
      typingTimeoutRef.current = setTimeout(() => {
        onTyping && onTyping(false);
      }, 3000);
    } else {
      onTyping && onTyping(false);
    }
    
    // Clean up the timeout on unmount
    return () => {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, [message, onTyping]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim() || attachments.length > 0) {
      onSendMessage(message, attachments);
      setMessage("");
      setAttachments([]);
    }
  };

  const handleAttachmentClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
      setAttachments(prev => [...prev, ...files]);
      
      // Reset the file input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  const removeAttachment = (index) => {
    setAttachments(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <div className="message-input">
      {attachments.length > 0 && (
        <div className="message-input__attachments">
          {attachments.map((file, index) => (
            <div key={index} className="message-input__attachment">
              <div className="message-input__attachment-preview">
                {file.type.includes('image') ? (
                  <img src={URL.createObjectURL(file)} alt="Preview" />
                ) : (
                  <i className="fas fa-file"></i>
                )}
              </div>
              <span className="message-input__attachment-name">{file.name}</span>
              <button 
                className="message-input__attachment-remove"
                onClick={() => removeAttachment(index)}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
          ))}
        </div>
      )}
      
      <form className="message-input__form" onSubmit={handleSubmit}>
        <button 
          type="button" 
          className="message-input__attach-btn"
          onClick={handleAttachmentClick}
          disabled={disabled}
        >
          <i className="fas fa-paperclip"></i>
        </button>
        
        <input 
          type="file" 
          ref={fileInputRef} 
          style={{ display: 'none' }} 
          onChange={handleFileChange}
          multiple
        />

        <input
          type="text"
          className="message-input__field"
          placeholder="Type a message..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          disabled={disabled}
        />

        <button 
          type="button" 
          className="message-input__emoji-btn"
          onClick={() => setShowEmojiPicker(!showEmojiPicker)}
          disabled={disabled}
        >
          <i className="fas fa-smile"></i>
        </button>

        <button
          type="submit"
          className="message-input__send-btn"
          disabled={disabled || (!message.trim() && attachments.length === 0)}
        >
          <i className="fas fa-paper-plane"></i>
        </button>
      </form>
      
      {showEmojiPicker && (
        <div className="message-input__emoji-picker">
          {/* Emoji picker implementation would be added here */}
          <div className="message-input__emoji-grid">
            {['😀', '😂', '😍', '🥰', '😎', '👍', '❤️', '🔥', '👏', '🙏'].map(emoji => (
              <button 
                key={emoji}
                className="message-input__emoji" 
                onClick={() => {
                  setMessage(prev => prev + emoji);
                  setShowEmojiPicker(false);
                }}
              >
                {emoji}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default MessageInput;
