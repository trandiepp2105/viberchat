import React, { createContext, useState, useEffect, useContext, useCallback } from "react";
import { authAPI, userAPI } from "../services";

// Create the AuthContext
const AuthContext = createContext(null);

// AuthProvider component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Check if user is logged in on mount
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // Check if we have a token
        const token = localStorage.getItem("access_token");
        if (!token) {
          setLoading(false);
          return;
        }

        // Verify token and get user profile
        await authAPI.verifyToken(token);
        const { data } = await userAPI.getProfile();
        setUser(data);
        setError(null);
      } catch (err) {
        console.error("Authentication error:", err);
        localStorage.removeItem("access_token");
        localStorage.removeItem("refresh_token");
        setError("Session expired. Please log in again.");
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  // Login function - now uses username based authentication
  const login = async (username, password) => {
    try {
      setLoading(true);
      const { data } = await authAPI.login(username, password);

      // Save tokens
      localStorage.setItem("access_token", data.access);
      localStorage.setItem("refresh_token", data.refresh);

      // Get user profile
      const userResponse = await userAPI.getProfile();
      setUser(userResponse.data);
      setError(null);

      return true;
    } catch (err) {
      console.error("Login error:", err);
      setError(
        err.response?.data?.detail ||
          "Login failed. Please check your credentials."
      );
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Register function
  const register = async (userData) => {
    try {
      setLoading(true);
      const response = await authAPI.register(userData);
      return response.data;
    } catch (err) {
      console.error("Registration error:", err);
      setError(
        err.response?.data?.detail || "Registration failed. Please try again."
      );
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Verify OTP function for registration
  const verifyOTP = async (email, otpCode) => {
    try {
      setLoading(true);
      const response = await userAPI.verifyOTP(email, otpCode);
      return response.data;
    } catch (err) {
      console.error("OTP verification error:", err);
      setError(err.response?.data?.detail || "Invalid or expired OTP code.");
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Update user profile
  const updateProfile = async (profileData) => {
    try {
      setLoading(true);
      const { data } = await userAPI.updateProfile(profileData);
      setUser(prev => ({ ...prev, ...data }));
      setError(null);
      return true;
    } catch (err) {
      console.error("Profile update error:", err);
      setError(
        err.response?.data?.detail || "Failed to update profile."
      );
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Change password
  const updatePassword = async (oldPassword, newPassword) => {
    try {
      setLoading(true);
      await userAPI.changePassword(oldPassword, newPassword);
      setError(null);
      return true;
    } catch (err) {
      console.error("Password change error:", err);
      setError(
        err.response?.data?.detail || "Failed to change password."
      );
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Logout function
  const logout = useCallback(() => {
    // Clear tokens
    localStorage.removeItem("access_token");
    localStorage.removeItem("refresh_token");
    
    // Clear user state
    setUser(null);
    
    // Optional: redirect to login page
    window.location.href = "/login";
  }, []);

  // Password reset request
  const requestPasswordReset = async (email) => {
    try {
      setLoading(true);
      const response = await userAPI.requestPasswordReset(email);
      setError(null);
      return response.data;
    } catch (err) {
      console.error("Password reset request error:", err);
      setError(
        err.response?.data?.detail || "Failed to request password reset."
      );
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Complete password reset
  const completePasswordReset = async (email, otpCode, newPassword, confirmPassword) => {
    try {
      setLoading(true);
      const response = await userAPI.completePasswordReset(
        email,
        otpCode,
        newPassword,
        confirmPassword
      );
      setError(null);
      return response.data;
    } catch (err) {
      console.error("Password reset completion error:", err);
      setError(
        err.response?.data?.detail || "Failed to reset password."
      );
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Check if user is authenticated
  const isAuthenticated = !!user;

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        error,
        isAuthenticated,
        login,
        register,
        verifyOTP,
        logout,
        updateProfile,
        updatePassword,
        requestPasswordReset,
        completePasswordReset,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use the AuthContext
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
