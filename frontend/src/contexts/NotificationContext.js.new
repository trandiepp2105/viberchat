import React, { createContext, useState, useEffect, useContext, useCallback } from "react";
import { notificationAPI } from "../services";
import { useAuth } from "./AuthContext";

// Create the NotificationContext
const NotificationContext = createContext(null);

// NotificationProvider component
export const NotificationProvider = ({ children }) => {
  const { isAuthenticated, user } = useAuth();
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [settings, setSettings] = useState({
    email_notifications: true,
    push_notifications: true,
    message_notifications: true,
    sound_enabled: true
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch notifications from the API
  const fetchNotifications = useCallback(async () => {
    if (!isAuthenticated) return;
    
    try {
      setLoading(true);
      const response = await notificationAPI.getNotifications();
      setNotifications(response.data);
      
      // Get unread count
      const unreadResponse = await notificationAPI.getUnreadNotifications();
      setUnreadCount(unreadResponse.data.length);
      
      setError(null);
    } catch (err) {
      console.error("Error fetching notifications:", err);
      setError("Failed to load notifications");
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated]);

  // Fetch notification settings
  const fetchSettings = useCallback(async () => {
    if (!isAuthenticated) return;
    
    try {
      const response = await notificationAPI.getSettings();
      setSettings(response.data);
    } catch (err) {
      console.error("Error fetching notification settings:", err);
    }
  }, [isAuthenticated]);

  // Initialize notifications when authenticated
  useEffect(() => {
    if (isAuthenticated) {
      fetchNotifications();
      fetchSettings();
      
      // Set up a refresh interval (every 30 seconds)
      const intervalId = setInterval(fetchNotifications, 30000);
      
      return () => clearInterval(intervalId);
    }
  }, [isAuthenticated, fetchNotifications, fetchSettings]);

  // Mark a notification as read
  const markAsRead = async (notificationId) => {
    try {
      await notificationAPI.markAsRead(notificationId);
      
      // Update the local state
      setNotifications(prevNotifications =>
        prevNotifications.map(notification =>
          notification.id === notificationId
            ? { ...notification, is_read: true, read_at: new Date().toISOString() }
            : notification
        )
      );
      
      // Update unread count
      setUnreadCount(prevCount => Math.max(0, prevCount - 1));
      
      return true;
    } catch (err) {
      console.error("Error marking notification as read:", err);
      return false;
    }
  };

  // Mark all notifications as read
  const markAllAsRead = async () => {
    try {
      await notificationAPI.markAllAsRead();
      
      // Update the local state
      setNotifications(prevNotifications =>
        prevNotifications.map(notification => ({
          ...notification,
          is_read: true,
          read_at: new Date().toISOString()
        }))
      );
      
      // Reset unread count
      setUnreadCount(0);
      
      return true;
    } catch (err) {
      console.error("Error marking all notifications as read:", err);
      return false;
    }
  };

  // Update notification settings
  const updateSettings = async (newSettings) => {
    try {
      await notificationAPI.updateSettings(newSettings);
      setSettings(newSettings);
      return true;
    } catch (err) {
      console.error("Error updating notification settings:", err);
      return false;
    }
  };

  // Add a new notification (used for real-time updates)
  const addNotification = (notification) => {
    setNotifications(prev => [notification, ...prev]);
    
    if (!notification.is_read) {
      setUnreadCount(prevCount => prevCount + 1);
    }
    
    // Show desktop notification if enabled
    if (settings.push_notifications && "Notification" in window) {
      if (Notification.permission === "granted") {
        new Notification(notification.title || "New Notification", {
          body: notification.message,
          icon: "/logo192.png"
        });
      } else if (Notification.permission !== "denied") {
        Notification.requestPermission();
      }
    }
    
    // Play sound if enabled
    if (settings.sound_enabled) {
      const audio = new Audio('/notification.mp3');
      audio.play().catch(e => console.error("Error playing notification sound:", e));
    }
  };

  return (
    <NotificationContext.Provider
      value={{
        notifications,
        unreadCount,
        settings,
        loading,
        error,
        fetchNotifications,
        markAsRead,
        markAllAsRead,
        updateSettings,
        addNotification
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};

// Custom hook to use the NotificationContext
export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error(
      "useNotification must be used within a NotificationProvider"
    );
  }
  return context;
};
